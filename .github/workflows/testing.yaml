name: Testing

on: 
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  id-token: write
  contents: read

concurrency: test_environment

env: 
  ENV: test

jobs:
    unit-tests:
      name: 'Run unit tests'
      runs-on: ubuntu-latest
      environment: testing
      outputs:
        success: ${{ steps.set-env.outputs.success }}

      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: Intsall node
          uses: actions/setup-node@v3
          with:
            node-version: '16.13.1'
            cache: 'npm'
        - name: 'Install app'
          run: npm ci
        - name: 'Build'
          run: npm run build --if-present
        - name: 'Run tests'
          run: npm test
        - name: Set environment variable
          id: set_env
          run: echo "FIRST_JOB_SUCCESS=true" >> "$GITHUB_OUTPUT"
          
    tf-setup:
      name: 'Provision test environment'
      runs-on: ubuntu-latest
      needs: unit-tests
      outputs:
        sql-server-encrypted: ${{ steps.terraform.outputs.sql_server_encrypted }}
      environment: testing
      env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      
      steps:
        - name: Checkout
          uses: actions/checkout@v3
        - name: 'Terraform Setup'
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_wrapper: false
        - name: 'Initialize Terraform'
          working-directory: ./terraform
          run: terraform init
        - name: 'Get state'
          working-directory: ./terraform
          run: terraform plan -refresh-only
        - name: 'Make plan'
          working-directory: ./terraform
          run: terraform plan -out test.tfplan
        - name: 'Apply plan'
          working-directory: ./terraform
          run: terraform apply test.tfplan

    build-frontend:
        name: 'Build Frontend'
        needs: tf-setup
        runs-on: ubuntu-latest
        environment: testing
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        steps:
            - name: Login to Azure with service principal
              uses: azure/login@v1.4.3
              with:
                creds: ${{ secrets.AZURE_SP_CREDENTIALS }}
            - name: 'Loggin to Azure Container Registry'
              run: az acr login --name taroFrontendTestContainerRegistry.azurecr.io
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1
            - name: Build and push
              uses: docker/build-push-action@v2
              with:
                file: ./testing.Dockerfile
                push: true
                tags: tarofrontendtestcontainerregistry.azurecr.io/taro:frontend
  
    deploy-frontend:
        name: 'Deploy Frontend'
        runs-on: ubuntu-latest
        needs: [tf-setup, build-frontend]
        environment: testing
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: 'Terraform Setup'
              uses: hashicorp/setup-terraform@v1
              with:
                terraform_wrapper: false
            - name: 'Initialize Terraform'
              working-directory: ./terraform/deploy
              run: terraform init
            - name: 'Make plan'
              working-directory: ./terraform/deploy
              run: terraform plan -var "image_registry_credential_user=$ARM_CLIENT_ID" -var "image_registry_credential_password=$ARM_CLIENT_SECRET" -out 'test-deploy.tfplan'
            - name: 'Apply plan'
              working-directory: ./terraform/deploy
              run: terraform apply test-deploy.tfplan

    tf-destroy:
        name: 'Destroy test environment'
        
        needs: [unit-tests, tf-setup, build-frontend, deploy-frontend]
        if: success() || ${{needs.unit-tests.outputs.success}} == 'true'
        runs-on: ubuntu-latest
        environment: testing
        env:
            ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
            ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
            ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: 'Terraform Setup'
              uses: hashicorp/setup-terraform@v1
            - name: 'Initialize Terraform'
              working-directory: ./terraform
              run: terraform init
            - name: 'Get state'
              working-directory: ./terraform
              run: terraform plan -refresh-only
            - name: 'Make plan'
              working-directory: ./terraform
              run: terraform plan -destroy -out test.tfplan
            - name: 'Apply plan'
              working-directory: ./terraform
              run: terraform apply test.tfplan
        